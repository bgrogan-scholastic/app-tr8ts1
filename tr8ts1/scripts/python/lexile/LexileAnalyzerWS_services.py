################################################## 
# LexileAnalyzerWS_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from LexileAnalyzerWS_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class LexileAnalyzerWSLocator:
    LexileAnalyzerWSSoap_address = "http://www.lexile.com/lexilews/lexileanalyzerws.asmx"
    def getLexileAnalyzerWSSoapAddress(self):
        return LexileAnalyzerWSLocator.LexileAnalyzerWSSoap_address
    def getLexileAnalyzerWSSoap(self, url=None, **kw):
        return LexileAnalyzerWSSoapSOAP(url or LexileAnalyzerWSLocator.LexileAnalyzerWSSoap_address, **kw)

# Methods
class LexileAnalyzerWSSoapSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: Analyze
    def Analyze(self, request):
        if isinstance(request, AnalyzeSoapIn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.lexile.com/LexileWS/Analyze", **kw)
        # no output wsaction
        response = self.binding.Receive(AnalyzeSoapOut.typecode)
        if isinstance(response, AnalyzeSoapOut.typecode.pyclass) is False:
            raise TypeError, "%s incorrect response type" % (response.__class__)
        return response

AnalyzeSoapIn = ns0.Analyze_Dec().pyclass

AnalyzeSoapOut = ns0.AnalyzeResponse_Dec().pyclass
