################################################## 
# LexileAnalyzerWS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition

##############################
# targetNamespace
# http://www.lexile.com/LexileWS/
##############################

class ns0:
    targetNamespace = "http://www.lexile.com/LexileWS/"

    class AnalyzerResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.lexile.com/LexileWS/"
        type = (schema, "AnalyzerResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AnalyzerResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Lexile"), aname="_Lexile", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Code"), aname="_Code", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"WordCount"), aname="_WordCount", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"MeanSentenceLength"), aname="_MeanSentenceLength", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"MeanLogWordFrequency"), aname="_MeanLogWordFrequency", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Lexile = None
                    self._Code = None
                    self._WordCount = None
                    self._MeanSentenceLength = None
                    self._MeanLogWordFrequency = None
                    return
            Holder.__name__ = "AnalyzerResult_Holder"
            self.pyclass = Holder

    class Analyze_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://www.lexile.com/LexileWS/"
        literal = "Analyze"
        def __init__(self, **kw):
            ns = ns0.Analyze_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"str"), aname="_str", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.lexile.com/LexileWS/","Analyze")
            kw["aname"] = "_Analyze"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._str = None
                    return
            Holder.__name__ = "Analyze_Holder"
            self.pyclass = Holder

    class AnalyzeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://www.lexile.com/LexileWS/"
        literal = "AnalyzeResponse"
        def __init__(self, **kw):
            ns = ns0.AnalyzeResponse_Dec.schema
            TClist = [ns0.AnalyzerResult_Def(pname=(ns,"AnalyzeResult"), aname="_AnalyzeResult", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.lexile.com/LexileWS/","AnalyzeResponse")
            kw["aname"] = "_AnalyzeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AnalyzeResult = None
                    return
            Holder.__name__ = "AnalyzeResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.lexile.com/LexileWS/)
