// JavaScript Document
var flto=null;
var getHelpOn = false;
var testonPageOn = false;
var arrow = false;
var viewModel = false;
var yPosition = 0;
var popupFunction;
var popupcheck;
var height = false;
var doAfterFunction;

function detectMacXFF2() {
  var userAgent = navigator.userAgent.toLowerCase();
  if (/firefox[\/\s](\d+\.\d+)/.test(userAgent)) {
    var ffversion = new Number(RegExp.$1);
    if (ffversion < 3 && userAgent.indexOf('mac') != -1) {
      return true;
    }
  }
}

function getHighestZIndex() {
	var tmpelements = $('*');
	var tmpIndex = 0;
	tmpelements = $.grep(tmpelements,function(n,i) {
		if($(n).css('z-index') != 'auto') {
			if (parseInt($(n).css('z-index')) > tmpIndex) {
				tmpIndex = $(n).css('z-index');
			}
		}
		
	});
	return tmpIndex;
}

 /********  popup ************/
(function($){  
	$.fn.popup = function(options) {  
	/*overPageClass - string - class be used for an over page popup
	onPageClass - string - class be used for an on page popup
	layerClass - string - class for transparent overlay
	outlineClass - string - class for popup transparent outline,
	closeClass - string - class for close button added to popup,
	contentClass - string - class for content div that holds dynamic content in popup,
	closeImgSrc - string - the path to the image used for the close button
	closeHelpText - string - the tooltip text for the close button,
	contentLoadPath - string - the path to a php/html file that should be dynamically loaded into the content div
	onPage - boolean - determines if popup is treated as on page (true) or over page (false)
	coords - x,y coordinates - {x:0,y:0} format of the coordinates at which an on page popup should appear
	outlineThick - integer - thickness in pixels of popup outline
	outlineImgDim - integer - dimensions of corner images of outline
	doBefore - function - a function to run before the popup is created
	doAfter - function - a function to run after the popup is displayed
	
	*/
	var defaults = {  
			overPageClass:"overpagePopup",
			onPageClass:"onpagePopup",
			closeClass:"popupClose",
			contentClass:"content",
			closeHelpText:"Close this popup.",
			contentLoadPath:false,
			onPage:false,
			height:false,
			balloon:false,
			parent:false,
			coords:false,
			scrollbars:false,
			doBefore:function(popup){},
			doAfter:function(popup){}
			
	};  
	/*$(defaults.overPageClass).hide();
	$(defaults.onPageClass).hide();*/
	
	var options = $.extend(defaults, options);  
	
	if(options.balloon) options.onPage=true;
	if(options.onPage){
		
		//on page popup defaults
		var popupClass = options.onPageClass;
		if ($.browser.mozilla && navigator.userAgent.indexOf('Macintosh;') != -1){
			var onPageDef = {
				outlineThick:8,
				outlineImgDim:12,	
				closeImgSrc:"images/common/onpage_hd_close.png",
				outlineClass:"onpageOutlineffmac"
			}
		} else {
			var onPageDef = {
				outlineThick:8,
				outlineImgDim:12,	
				closeImgSrc:"images/common/onpage_hd_close.png",
				outlineClass:"onpageOutline"
			}
		}
		
		options = $.extend(onPageDef, options);  		
		//set coords
		if(options.parent ){
			if(!options.coords){
				var locIndent = $(options.parent).width()/2;
				var locHdent = $(options.parent).height()/2;
				var parentX = $(options.parent).position().left;
				var parentY = $(options.parent).position().top;
				
				options.coords = {x:parentX + locIndent,y:parentY + locHdent};
				
			}else{
				options.coords={x:0,y:0};
			}
		}
	
	}else{
		//over page popup defaults
		var popupClass = options.overPageClass;	
		if (detectMacXFF2() && 1==2){
			var overPageDef = {
				outlineThick:15,
				outlineImgDim:22,	
				closeImgSrc:"images/common/popup_hd_close.png",
				outlineClass:"modalOutlineffmac",
				layerClass:"modalLayerffmac"
			}
		} else {
			var overPageDef = {
				outlineThick:15,
				outlineImgDim:22,	
				closeImgSrc:"images/common/popup_hd_close.png",
				outlineClass:"modalOutline",
				layerClass:"modalLayer"
			}
		}
				
		options = $.extend(overPageDef, options);
		height = options.height;
	}
	
	
	
	
	var locateClass=""; //for finding layers and outlines of popup
	function popupResize(){
		if(!options.onPage){
			if(!($.browser.msie && $.browser.version() < 7)){
			   $('.' + options.outlineClass).css({position:"fixed"});	
			}
			if(flto){
				window.clearTimeout(flto);
				flto=null;
			}	
			//run count only after specified timeout
			flto=window.setTimeout(function(){
				if($.browser.msie && $.browser.version() < 7){
					
				} else {
					$('.' + popupClass + ':visible').each(function(){$(this).popupPosition({coords:options.coords,onPage:options.onPage});});	
					if (options.height != false) {
						var mlheight = getPageSizeWithScroll().height;
					} else {
						var mlheight = getPageSizeWithScroll().height;
					}
					var mlwidth = $(window).width();
					$('.' + options.layerClass).height(mlheight + "px");
					$('.' + options.layerClass).width(mlwidth + "px");
				
				
					var xspot = ($(window).width()/2)+100;
					var yspot = ($(window).height()/2)-60;
				
					var modelCoords = {x:xspot,y:yspot};
					var shadowCoords = {x:xspot -8,y:yspot - 8};
					
					$('.onpageOutline:visible').each(function(){$(this).popupPosition({coords:shadowCoords,onPage:options.onPage});});
					$('#viewModels').each(function(){$(this).popupPosition({coords:modelCoords,onPage:options.onPage});});		
					$('.onpageOutline:visible').css({position:"fixed"});	
					$('#viewModels').css({position:"fixed"});
				}
				
			},150);
		}
	
	}
	function setZIndex(popupObj){
		/* find the top most zIndex*/
		var topZIndex = parseInt(getHighestZIndex())+1;
		$('.' + options.overPageClass+':visible').add('.' + options.onPageClass+':visible').each(function(){
   												
											   if(popupObj.css("z-index")>topZIndex){
												   topZIndex=$(this).css("z-index");
												  
											   } 
										});
		
		//set zIndex for popup 
		if (viewModel == true){
			topZIndex = parseInt(topZIndex) + 4
		} else {
			topZIndex = parseInt(topZIndex) + 2
		}
		popupObj.css({zIndex:topZIndex});
		
		locateClass="forPopup" + topZIndex;
		
		return topZIndex;
	}
	
	//create and append transparent layer and outline
	function createModalLayer(popupZIndex){
		
		var mZIndex = popupZIndex-1;
		
		//create overlay
		if(!options.onPage){
			var mlayer = document.createElement("div");
			$(mlayer).addClass(options.layerClass);
			$(mlayer).addClass(locateClass);
			$(mlayer).css({zIndex:mZIndex});
			if(jQuery.browser.safari){
				var mlwidth = getPageSizeWithScroll().width;
				$(mlayer).width(mlwidth + "px");
			}
			var mlheight = getPageSizeWithScroll().height;
			$(mlayer).height(mlheight + 'px');
		}
		
		
		//create outline layer
		var outlineLayer = document.createElement("div");
		$(outlineLayer).addClass(options.outlineClass);
		$(outlineLayer).addClass(locateClass);
		$(outlineLayer).css({zIndex:mZIndex});
		$(outlineLayer).append('<div class="rtop"><div></div></div><div class="ltop"></div><div class="middle"></div><div class="rbot"><div></div></div><div class="lbot"></div>')
		if(options.onPage && options.balloon && arrow == true){
			$(outlineLayer).prepend('<div class="arrow"></div>');
		}
		
		$('body').prepend(outlineLayer);
		if(!options.onPage) $('body').prepend(mlayer);
		
	}
	
	function shapeModalOutline(popupObj){
		
		var outlineObj = $('.' + options.outlineClass).filter('.' + locateClass);
		
		var pwidth = popupObj.width();
		var pheight = popupObj.height();
		
		var outlineHeight = pheight + options.outlineThick*2;
		var outlineWidth = pwidth + options.outlineThick*2;
		
		outlineObj.height(outlineHeight);
		outlineObj.width(outlineWidth);
		
		var adjustedHeight= outlineHeight-(options.outlineImgDim*2);
		
		outlineObj.find('.middle').height(adjustedHeight);outlineObj.find('.middle').height(adjustedHeight);
		
		
		var adjustedWidth= outlineWidth-(options.outlineImgDim*2);
		outlineObj.find('.rtop').width(adjustedWidth);
		outlineObj.find('.rbot').width(adjustedWidth);
		
		//hide underlying select objects in IE6
		if(options.onPage && $.browser.msie && $.browser.version() < 7){
			var iframeOverlay = document.createElement('iframe');
			$(iframeOverlay).width(adjustedWidth);
			$(iframeOverlay).height(adjustedHeight);
			$(iframeOverlay).css({margin:options.outlineImgDim +"px"});
			//$(iframeOverlay).
			outlineObj.prepend(iframeOverlay);
			
		}
		if(!options.onPage && $.browser.msie && $.browser.mozilla && navigator.userAgent.indexOf('Macintosh') == -1) {
			var iframeOverlay = document.createElement('iframe');
			$(iframeOverlay).css({width: popupObj.width(), height: popupObj.height(), top: '0', left: '0', position:'absolute',zIndex: popupObj.css('z-index')-1, display:'none'});
			iframeOverlay.setAttribute('frameborder','0');
			iframeOverlay.setAttribute('id','iframeOverlay');
			outlineObj.prepend(iframeOverlay);
		}
		outlineObj.show();
		
	}
	
	
	return this.each(function() {  
		var popupObj = $(this);
		
		//code for IE6, setting the switches to prevent double popups
		if($.browser.msie){
			if (this.id == 'getHelp'){
				if (getHelpOn == false){
					getHelpOn = true;
				} else {
					return false;
				}
			} else if (this.id == 'testonPage'){
				if (testonPageOn == false){
					testonPageOn = true;
				} else {
					return false;
				}
			}
		}
		
		//add class to object
		popupObj.addClass(popupClass);
		
		//do prep function
		options.doBefore(popupObj);
		
		//load any remote data specified into content area
		if(options.contentLoadPath){
				
			$(popupObj).find('.' + options.contentClass).load(options.contentLoadPath);
		}
		
		//get zIndex based on existing popup layers
		
		var popupZIndex = setZIndex(popupObj);
		
		//create translucent layover
		createModalLayer(popupZIndex);
		
		
		if($.browser.msie && $.browser.version() < 7 && !options.onPage){
			//setTimeout(void(),1);
			//hide selects in IE6 for select zIndex error
			$('select').not($(this).find('select')).css('visibility','hidden');
			//disallow scroll since popup won't float in IE6
			//$('html').css({overflow:"hidden"});	
		}
		/*if (document.getElementById('shuffle')) {
			document.getElementById('shuffle').style.visibility = 'hidden';
		}
		if ($('.mwzAnon').length != 0) {
			$('.mwzAnon').css({visibility: 'hidden'});
		}
		if ($('#organizer').length != 0) {
			document.getElementById('organizer').style.visibility= 'hidden';
		}*/
			if (!options.onPage) {
				//$('body').css({overflow:'hidden'});
			}
		//add inner wrapper for popup design
		var popupHeader = $(popupObj).find('h1:first');
		if(popupHeader.find('div').length==0){
			popupHeader.wrapInner('<div></div>');
		}
		
		//insert popup close button if missing
		if(popupObj.find('.' + options.closeClass).length==0){
			popupHeader.before('<a class="' + options.closeClass + '" title="' + options.closeHelpText + '" href="#" onclick="return false;"><img alt="Close Popup" src="' + options.closeImgSrc + '" /></a>');
		}
		
		//add popup bottom
		if(popupObj.find('.popupBot').length==0){
			var botWidth = popupObj.width()-8;
			popupObj.append('<div class="popupBot"><div></div></div>');
		}
		
		//add on page popup balloon arrow
		if(options.onPage && options.balloon && arrow == true){
			popupObj.prepend('<div class="arrow"></div>');	
		}else{
			popupObj.find('.arrow').remove();	
		}
		
		//correct safari overflow auto width bug
		if(jQuery.browser.safari && !options.onPage){
			popupObj.find('.content').width(popupObj.width()-20);
		}
		
		//position popup
		popupObj.popupPosition({coords:options.coords,onPage:options.onPage,balloon:options.balloon}); //positionPopup(popupObj);
		
		//shape outline dimensions and show outline
		shapeModalOutline(popupObj);
		
		
		//show popup
		popupObj.show();
		
		//add positioning on resize
		$(window).resize(popupResize);
		
		//add close functionality to close button
		popupObj.find('.popupClose').click(function(){
														if(options.blockClosing == true) {
															return false;															return false;
														}
														popupObj.popupClose({onPage:options.onPage,doAfter:doAfterFunction});
														return false;
												   }
											);
		
		//do callback function
		options.doAfter(popupObj);
		
		return false;
		
	});
	
	};  
})(jQuery); 



 /********  balloon ************/
(function($){  
	$.fn.balloon = function(clickedOrCoord) {  
	//clickedOrCoord - DOM Element or coordinate {x:integer,y:integer} - passed in for determining location of balloon
	
		return this.each(function() {  
			if(clickedOrCoord.x){
				$(this).popup({balloon:true,coords:clickedOrCoord})
			}else{
				$(this).popup({balloon:true,parent:clickedOrCoord})	
			}
		});
	
	};  

})(jQuery); 
 
 
 
 /********  popupClose ************/
(function($){  
	$.fn.popupClose = function(options) {  
	//popupClass - string - class be used for the popup


	var defaults = {  
			overPageClass:"overpagePopup",
			onPageClass:"onpagePopup",
			closeClass:"popupClose",
			onPage:false,
			doBefore:function(popup){},
			doAfter:function(popup){}
	};  
	
	var options = $.extend(defaults, options);  
	
	if(options.onPage){
		
		//on page popup defaults
		var popupClass = options.onPageClass;
		
		var onPageDef = {
			outlineClass:"onpageOutline"
		}
		
		options = $.extend(onPageDef, options);  
		
	}else{
		
		//over page popup defaults
		var popupClass = options.overPageClass;	
		if ($.browser.mozilla && navigator.userAgent.indexOf('Macintosh') != -1 && 1 == 2){
			var overPageDef = {
				outlineClass:"modalOutlineffmac",
				layerClass:"modalLayerffmac"
			}
		} else {
			var overPageDef = {
				outlineClass:"modalOutline",
				layerClass:"modalLayer"
			}

		}
		options = $.extend(overPageDef, options); 
	}
	
	
	return this.each(function() {  
		var popupObj = $(this);
		if($.browser.msie){
			//code for IE6 variable set
			if (this.id == 'getHelp'){ 
				getHelpOn = false;
			} else if (this.id == 'testonPage'){ 
				testonPageOn = false;
			}
		}
		if(popupObj.hasClass(popupClass)){
			//do prep function
			options.doBefore(popupObj);
	
			var popupZIndex = popupObj.css('zIndex');
		   	popupObj.hide();
			
			$('.' + options.layerClass).filter('.forPopup' + popupZIndex).remove();
			$('.' + options.outlineClass).filter('.forPopup' + popupZIndex).remove();
			
			if($.browser.msie && $.browser.version() < 7){
				if($('.' + options.layerClass).length==0){
					$('select').css('visibility','visible');	
					//$('html').css({overflow:"auto"});
					//alert('here1');
				} else {
					$('#projectName').css('visibility','visible');
				}
			}
			if (!options.onPage) {
				//document.body.style.overflow = 'auto';
			}
			if ($.browser.msie && $.browser.version() == 7) {
				//$('html').css({overflow:'hidden'});
				//$('body').css({backgroundAttachment: 'scroll'});
			}
		if (options.scrollbars && !options.onPage) {
				$('div.modalLayer').css({overflow: 'hidden'});
			}
			$('#iframeOverlay').remove();
			//do callback
			options.doAfter();
		}
										
		
		
	});
	
	};  
})(jQuery); 




 /********  popupPosition ************/
(function($){  
	$.fn.popupPosition = function(options) {  
	
	
	var defaults = {  
			onPage:false,
			balloon:true,
			coords:false
	};  
	
	var options = $.extend(defaults, options);  
	
	if(options.onPage){
		
		//on page popup defaults
		
		var onPageDef = {
			outlineThick:8,	
			outlineClass:"onpageOutline"
		}
		
		options = $.extend(onPageDef, options);  
		
	}else{
		
		//over page popup defaults
		if ($.browser.mozilla && navigator.userAgent.indexOf('Macintosh') != -1 && 1 == 2){
		
			var overPageDef = {
				outlineThick:15,
				outlineClass:"modalOutlineffmac",
				layerClass:"modalLayerffmac"
			}
			
		} else {
			var overPageDef = {
				outlineThick:15,
				outlineClass:"modalOutline",
				layerClass:"modalLayer"
			}
		}
		
		options = $.extend(overPageDef, options); 
	}
	
	if(options.balloon){
		var arrowWidth = 50;
		var arrowHeight = 40;
		var arrowIndent =20;
		
		var arrowTopRightSRC = "/images/common/onpage_warr_tright.png";
		var arrowTopRightOutlineSRC = "/images/common/onpage_barr_tright.png";
		var arrowTopLeftSRC = "/images/common/onpage_warr_tleft.png";
		var arrowTopLeftOutlineSRC = "/images/common/onpage_barr_tleft.png";		
		
		var arrowBotRightSRC = "/images/common/onpage_warr_bright.png";
		var arrowBotRightOutlineSRC = "/images/common/onpage_barr_bright.png";
		var arrowBotLeftSRC = "/images/common/onpage_warr_bleft.png";
		var arrowBotLeftOutlineSRC = "/images/common/onpage_barr_bleft.png";
	}
	
	return this.each(function() {  
		var popupObj = $(this);
		var locateClass = "forPopup" + popupObj.css('zIndex');
		
		var outlineObj = $('.' + options.outlineClass).filter('.' + locateClass);
		
		var pwidth = popupObj.width();
		var pheight = popupObj.height();
		var winWidth = $(window).width();
		
		if($.browser.msie && $.browser.version() < 7){
			var winHeight =  window.document.documentElement.clientHeight;
			var heightOffset = window.document.documentElement.scrollTop;
		}else{
			var winHeight = $('body').height();
			var heightOffset = 0;
		}
			
		if(!options.coords){
			
			//do as floating, centered popup
			
			if(winWidth>pwidth){
				pleft = parseInt((winWidth-pwidth)/2);
			}else{
				pleft=5;
			}
			if(winHeight>pheight){
				ptop = parseInt((winHeight-pheight)/2) + heightOffset;
				
			}else{
				ptop=5;
			}
			
			//if($.browser.msie && $.browser.version() < 7){	
				popupObj.css({position:"absolute",left:pleft + "px",top:ptop + "px"});
				outlineObj.css({position:"absolute",left:(pleft-options.outlineThick) + "px",top:(ptop-options.outlineThick) + "px"});
/*			}else{
				popupObj.css({position:"fixed",left:pleft + "px",top:ptop + "px"});
				outlineObj.css({position:"fixed",left:(pleft-options.outlineThick) + "px",top:(ptop-options.outlineThick) + "px"});
				
			}*/
		
		}else{
			
		// Do with coordinates
			if(options.balloon){
				var topY = $(window).scrollTop();
				var leftX = $(window).scrollLeft();
				if($.browser.msie && $.browser.version() < 7){
					var edgeX = leftX + window.document.documentElement.clientWidth;
				}else{
					var edgeX = leftX + winWidth;
				}
				var edgeY = topY + winHeight;
				var arrowIsTop = true;
				
				if(options.coords.y + pheight > edgeY && (options.coords.y - topY   > pheight + 40 )){
					arrowIsTop =false;
					outlineObj.css({paddingBottom:"40px",paddingTop:"0px"});
					popupObj.css({marginBottom:"40px",marginTop:"0px"});
					var arrowBgAlign = "bottom";
				}else{
					if (arrow == true){
						outlineObj.css({paddingTop:"40px",marginBottom:"0px"});
						popupObj.css({marginTop:"40px",paddingBottom:"0px"});
						var arrowBgAlign = "top";
					} else {
						outlineObj.css({paddingTop:"0px",marginBottom:"0px"});
						popupObj.css({marginTop:"0px",paddingBottom:"0px"});
						var arrowBgAlign = "top";
					
					}
				}

				
				//position x
				if(options.coords.x + pwidth < edgeX || pwidth > winWidth){//if space on left
					if(arrowIsTop){
						var arrowPic = arrowTopLeftSRC;
						var arrowOutlinePic = arrowTopLeftOutlineSRC;
						var arrowTopPos = 0 -arrowHeight+4;
						var arrowOutlineTopPos = 0;
						var arrowOutlineLeftPos = arrowIndent;
						pleft=options.coords.x-arrowIndent;
					}else{
						var arrowPic = arrowBotLeftSRC;
						var arrowOutlinePic = arrowBotLeftOutlineSRC;
						var arrowTopPos = pheight-1;
						var arrowOutlineTopPos = pheight + 8*2;
						var arrowOutlineLeftPos = arrowIndent;
						pleft=options.coords.x-arrowIndent;
						
					}
				
					
					popupObj.find('.arrow').css({left:(arrowIndent) + "px",top:arrowTopPos + "px",background:"url(" + arrowPic + ") no-repeat " + arrowBgAlign});
					outlineObj.find('.arrow').css({left:arrowOutlineLeftPos + "px",top:arrowOutlineTopPos + "px",background:"url(" + arrowOutlinePic +") no-repeat " + arrowBgAlign});
					
					
					
				}else{//if space on right
					if(arrowIsTop){
						var arrowPic = arrowTopRightSRC;
						var arrowOutlinePic = arrowTopRightOutlineSRC;
						var arrowTopPos = 0 -arrowHeight+4;
						var arrowOutlineTopPos = 0;
						var arrowleftPos = pwidth-(arrowIndent + arrowWidth) + 9;
						var arrowOutlineLeftPos = arrowleftPos + 8;
						pleft=options.coords.x + arrowIndent -pwidth;
						
					}else{
						
						var arrowPic = arrowBotRightSRC;
						var arrowOutlinePic = arrowBotRightOutlineSRC;
						var arrowTopPos = pheight -1;
						var arrowOutlineTopPos = pheight + 8*2;
						var arrowleftPos = pwidth-(arrowIndent + arrowWidth) + 9;
						var arrowOutlineLeftPos = arrowleftPos + 8;
						pleft=options.coords.x + arrowIndent - pwidth;
						
					}
						
						//options.coords.x = options.coords.x - pwidth;
						
						popupObj.find('.arrow').css({left:(arrowleftPos) + "px",top:arrowTopPos + "px",background:"url(" + arrowPic + ") no-repeat " + arrowBgAlign});
						outlineObj.find('.arrow').css({left:(arrowOutlineLeftPos) + "px",top:arrowOutlineTopPos + "px",background:"url(" + arrowOutlinePic + ") no-repeat " + arrowBgAlign});
						

					
				}
				
				//position y
				
				if(arrowIsTop){
					ptop=options.coords.y;
				}else{
					ptop=options.coords.y - (pheight + arrowHeight);
				}
			}else{
				//reset padding
				outlineObj.css({paddingTop:"0px",marginBottom:"0px"});
				popupObj.css({marginTop:"0px",paddingBottom:"0px"});
				
				//set left and top loc
				pleft=options.coords.x
				ptop = options.coords.y;
				
			}
			if (viewModel == true){
				if($.browser.msie && $.browser.version()() < 7){
					popupObj.css({position:"absolute",left:pleft + "px",top:ptop + "px"});
					outlineObj.css({position:"absolute",left:(pleft-options.outlineThick) + "px",top:(ptop-options.outlineThick) + "px"});
				} else {
					popupObj.css({position:"fixed",left:pleft + "px",top:ptop + "px"});
					outlineObj.css({position:"fixed",left:(pleft-options.outlineThick) + "px",top:(ptop-options.outlineThick) + "px"});
					viewModel = false;
				}
			} else {
				popupObj.css({position:"absolute",left:pleft + "px",top:ptop + "px"});
				outlineObj.css({position:"absolute",left:(pleft-options.outlineThick) + "px",top:(ptop-options.outlineThick) + "px"});
			}
			
		
		}
	});
			
	};  
})(jQuery); 




 /********  warning ************/
function warning(options) {  
/*options:
	title - string - title of warning
	msg - string/html - warning message to user
	yesAction - function - action to take on yes
	noAction - function - action to take on no
	cancelAction - function - action to take on cancel click
	buttons - array - button names and values.
	see popup function for more options
*/
		if (!options.buttons) {
			yesbutton = "Yes";
			nobutton = "No";
		} else {
			yesbutton = options.buttons.split(",")[0];
			nobutton = options.buttons.split(",")[1];
		}
		var newWarning = $(document.createElement('div'));
		newWarning.append('<h1>' + options.title + '</h1>');
		newWarning.addClass('warningPopup');
		
		var content = $(document.createElement('div'));
		content.addClass('content');
		content.append('<div>' + options.msg + '</div>');
		content.append('<div class="warningButtons"><input type="button" class="truebutton" name="yes" value="'+yesbutton+'"/><input class="truebutton" type="button" name="no" value="'+nobutton+'"/></div>');
		
		//handle yes action
		content.find('.warningButtons input[@name="yes"]').click(function(){
																	 newWarning.popupClose();
																 options.yesAction();
																	
																 });
		
		//handle no action
		content.find('.warningButtons input[@name="no"]').click(function(){
																	 newWarning.popupClose();
																 options.noAction();
																 });
		
		newWarning.append(content);
		
		newWarning.prependTo('body');
		newWarning.popup({});
		doAfterFunction = options.doAfter;
		
		//add cancel action
		newWarning.find('.popupClose').click(function(){
															 options.cancelAction();
													   	
													   
													   });
}
	
	
	
function getPageSizeWithScroll(){
	if (window.innerHeight && window.scrollMaxY) {// Firefox
		yWithScroll = window.innerHeight + window.scrollMaxY;
		xWithScroll = window.innerWidth + window.scrollMaxX;
	} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac
		yWithScroll = document.body.scrollHeight;
		xWithScroll = document.body.scrollWidth;
	} else { // works in Explorer 6 Strict, Mozilla (not FF) and Safari
		yWithScroll = document.body.offsetHeight;
		xWithScroll = document.body.offsetWidth;
  	}
	arrayPageSizeWithScroll = {width:xWithScroll,height:yWithScroll};
	
	return arrayPageSizeWithScroll;
}